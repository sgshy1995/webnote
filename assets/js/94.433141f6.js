(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{290:function(t,a,s){"use strict";s.r(a);var v=s(0),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"三种排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三种排序"}},[t._v("#")]),t._v(" 三种排序")]),t._v(" "),s("p",[t._v("请说出至少三种排序的思路，这三种排序的时间复杂度分别为")]),t._v(" "),s("p",[t._v("O(n*n)")]),t._v(" "),s("p",[t._v("O(n log2 n)")]),t._v(" "),s("p",[t._v("O(n + max)")]),t._v(" "),s("h3",{attrs:{id:"冒泡排序。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序。"}},[t._v("#")]),t._v(" 冒泡排序。")]),t._v(" "),s("p",[t._v("复杂度：O(n*n)。")]),t._v(" "),s("p",[t._v("每次比较两个相邻的数字作比较，小在前大在后；如此重复，直到所有的数字排完。")]),t._v(" "),s("h3",{attrs:{id:"快速排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速排序"}},[t._v("#")]),t._v(" 快速排序")]),t._v(" "),s("p",[t._v("复杂度：O(n log2 n)。")]),t._v(" "),s("p",[t._v("找其中的一个数作为标准，小于它的数字放在左边，大于放在右边。然后再选取一个数作为标准，重复直到只有一个数字为止。为保证其快速性，一般使用随机快排。")]),t._v(" "),s("h3",{attrs:{id:"基数排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基数排序"}},[t._v("#")]),t._v(" 基数排序")]),t._v(" "),s("p",[t._v("复杂度：O(n + max)。")]),t._v(" "),s("p",[t._v("创建10个桶，给每个数位（0到9），从个位数开始遍历数列中的每个元素的数位，把每个元素按照队列排列到对应数位的桶中，再从队列中恢复至数列，再遍历十位数，重复以上操作，直到遍历到最大元素的位数。")])])}),[],!1,null,null,null);a.default=_.exports}}]);