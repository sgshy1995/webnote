(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{243:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"异步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步"}},[t._v("#")]),t._v(" 异步")]),t._v(" "),s("p",[t._v("如果 JS 不能直接拿到一个函数的结果，可以先去执行别的代码，等结果到了再取结果，这就是异步。")]),t._v(" "),s("p",[t._v("异步的结果可以通过轮询获取，轮询就是定时去询问结果拿到了没有。")]),t._v(" "),s("p",[t._v("异步的结果可以通过回调获取，一般来说结果会被作为回调的第一个参数。")]),t._v(" "),s("p",[t._v("异步的好处是可以把用来等待的时间拿去做别的事情。")]),t._v(" "),s("h2",{attrs:{id:"回调"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回调"}},[t._v("#")]),t._v(" 回调")]),t._v(" "),s("p",[t._v("满足某些条件的函数被称为回调。")]),t._v(" "),s("p",[t._v("比如我写一个函数 A，传给另一个函数 B 调用，那么函数 A 就是回调。")]),t._v(" "),s("p",[t._v("回调可以用于同步任务，不一定非要用于异步任务。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同步的回调")]),t._v("\n")])])]),s("p",[t._v("有的时候回调还可以传给一个对象，如 request.onreadystatechange，等待浏览器来调用。")])])}),[],!1,null,null,null);a.default=e.exports}}]);