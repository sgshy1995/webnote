(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{272:function(a,e,t){"use strict";t.r(e);var v=t(0),_=Object(v.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"http缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http缓存"}},[a._v("#")]),a._v(" HTTP缓存")]),a._v(" "),t("p",[a._v("客户端在请求一些资源时，会先询问是否存在命中缓存，没有则再从服务器获取资源并放入缓存仓库中，以便下次请求直接读取。")]),a._v(" "),t("p",[a._v("http根据是否要向服务器发送请求，将缓存规则分为两类：强缓存和协商缓存（对比缓存）。")]),a._v(" "),t("h2",{attrs:{id:"强缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[a._v("#")]),a._v(" 强缓存")]),a._v(" "),t("p",[a._v("强缓存直接从缓存数据库中取出资源，无需再发送请求到服务器上。")]),a._v(" "),t("p",[a._v("http中用来判断是否命中强缓存的字段为 "),t("code",[a._v("Expires")]),a._v(" 和 "),t("code",[a._v("Cache-Control")]),a._v("，后者的优先级高于前者。")]),a._v(" "),t("h3",{attrs:{id:"expires"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[a._v("#")]),a._v(" Expires")]),a._v(" "),t("p",[t("code",[a._v("Expires")]),a._v(" 是HTTP/1.0的产物，现代浏览器基本使用的至少是HTTP/1.1，这个基本可以忽略了。")]),a._v(" "),t("p",[a._v("Response Headers:")]),a._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[a._v("expires:")]),a._v(" Thu, 30 May 2019 08:04:52 GMT\n")])])]),t("p",[t("code",[a._v("expires")]),a._v(" 是一个绝对的时间，这代表这个资源在这个时间点之前都可以直接从缓存中读取。")]),a._v(" "),t("h3",{attrs:{id:"cache-control"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[a._v("#")]),a._v(" Cache-Control")]),a._v(" "),t("p",[a._v("HTTP/1.1的产物，在请求头和响应头都可以穿入，但语法略有不同。")]),a._v(" "),t("p",[a._v("Response Headers:")]),a._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[a._v("cache-control:")]),a._v(" public, max-age=7200\n")])])]),t("p",[t("code",[a._v("Cache-Control")]),a._v(" 定义了 "),t("code",[a._v("public")]),a._v(" 和 "),t("code",[a._v("max-age")]),a._v("，这是一个相对时间（单位：秒），这里代表资源的缓存在这个请求之后的2小时内都有效。")]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("- 请求头\n\n-- Cache-Control: max-age=<seconds>\n-- Cache-Control: max-stale[=<seconds>]\n-- Cache-Control: min-fresh=<seconds>\n-- Cache-control: no-cache\n-- Cache-control: no-store\n-- Cache-control: no-transform\n-- Cache-control: only-if-cached\n\n- 响应头\n\n-- Cache-control: must-revalidate\n-- Cache-control: no-cache\n-- Cache-control: no-store\n-- Cache-control: no-transform\n-- Cache-control: public\n-- Cache-control: private\n-- Cache-control: proxy-revalidate\n-- Cache-control: max-age=<seconds>\n-- Cache-control: s-maxage=<seconds>\n")])])]),t("p",[a._v("常见字段意义：")]),a._v(" "),t("p",[t("code",[a._v("public")]),a._v(" 表明响应可以被任何对象（包括：发送请求的客户端，CDN等代理服务器，等等）缓存，即使是通常不可缓存的内容（例如，该响应没有max-age指令或Expires消息头）。")]),a._v(" "),t("p",[t("code",[a._v("private")]),a._v(" 表明响应值可以被科幻段缓存，不能作为共享（缓存服务器）。")]),a._v(" "),t("p",[t("code",[a._v("no-cache")]),a._v(" 可以在本地缓存，但每次请求是都需要向服务器验证，如果允许则使用本地缓存。")]),a._v(" "),t("p",[t("code",[a._v("no-store")]),a._v(" 禁止缓存。")]),a._v(" "),t("p",[t("code",[a._v("max-age=[seconds]")]),a._v(" 设置缓存的最大周期（秒）。")]),a._v(" "),t("p",[t("strong",[a._v("默认为"),t("code",[a._v("private")]),a._v("。")])]),a._v(" "),t("h3",{attrs:{id:"强制缓存状态码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存状态码"}},[a._v("#")]),a._v(" 强制缓存状态码")]),a._v(" "),t("p",[a._v("200。")]),a._v(" "),t("h3",{attrs:{id:"两种情况"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#两种情况"}},[a._v("#")]),a._v(" 两种情况")]),a._v(" "),t("p",[a._v("但是chrome查看network会看到状态码后面多了注释："),t("code",[a._v("200 (from disk cache)")]),a._v("。")]),a._v(" "),t("p",[a._v("强缓存发生时，会有两个情况出现：")]),a._v(" "),t("ul",[t("li",[a._v("from memory cache")])]),a._v(" "),t("p",[a._v("缓存资源在内存中，会话关闭后内存中的缓存就会被释放，重新打开后取不到该缓存。")]),a._v(" "),t("ul",[t("li",[a._v("from disk cache")])]),a._v(" "),t("p",[a._v("缓存资源在硬盘中，会话关闭后下次进入还可以读取到。")]),a._v(" "),t("p",[a._v("每次打开一个网页，如果该网页最近访问过，那么资源很可能会"),t("code",[a._v("from disk cache")]),a._v("，从硬盘中读取缓存；如果此时刷新页面，就会出现"),t("code",[a._v("from memory cache")]),a._v("，内存永远是读取最快的。")]),a._v(" "),t("h2",{attrs:{id:"协商缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[a._v("#")]),a._v(" 协商缓存")]),a._v(" "),t("p",[a._v("协商缓存（对比缓存）是需要经过服务器确认是否使用缓存的机制。")]),a._v(" "),t("h3",{attrs:{id:"强制缓存状态码-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存状态码-2"}},[a._v("#")]),a._v(" 强制缓存状态码")]),a._v(" "),t("p",[a._v("其http状态码为 "),t("code",[a._v("304")]),a._v("，意为 "),t("code",[a._v("not modified")]),a._v("（未修改）。")]),a._v(" "),t("h3",{attrs:{id:"原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),t("p",[a._v("可以看到，虽然客户端仍然发起了http请求服务器，但是服务器只做了标志对比来确认是否使用缓存，如果确认，则不需要返回资源。虽然没有减少请求数，但是极大地减少了请求负荷，可以明显提升请求速度和减小网络带宽。")]),a._v(" "),t("p",[a._v("如何对比标志来确认缓存？")]),a._v(" "),t("h3",{attrs:{id:"last-modified-if-modified-since"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-if-modified-since"}},[a._v("#")]),a._v(" Last-Modified/If-Modified-Since")]),a._v(" "),t("p",[a._v("当浏览器发起一个请求资源时，服务器会在response header中返回一个 "),t("code",[a._v("Last-Modified")]),a._v("，一个绝对时间，代表这个资源的最后修改时间；当浏览器再次请求该资源时，会在request header中戴上一个 "),t("code",[a._v("If-Modified-Since")]),a._v("，值为上次服务器返回的 "),t("code",[a._v("Last-Modified")]),a._v(" 值。")]),a._v(" "),t("p",[a._v("服务器会根据资源上次修改时间和客户端发送的值来确认这段时间内资源有没有被修改过，如果没有则返回304，如果有则返回200。")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/http_cache_last_modified.jpg",alt:"http_cache_last_modified"}})]),a._v(" "),t("h3",{attrs:{id:"etag-if-none-match"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#etag-if-none-match"}},[a._v("#")]),a._v(" Etag/If-None-Match")]),a._v(" "),t("p",[a._v("与上面的机制类似，但是不同的是他是通过一个校验码来对比资源是否被修改过，而不是通过资源的最后修改时间。")]),a._v(" "),t("p",[a._v("当一个请求时，服务器会返回一个 "),t("code",[a._v("ETag")]),a._v(" 字段，然后浏览器下次请求时，会带上 "),t("code",[a._v("If-None-Match")]),a._v("，值为上次服务器返回的 "),t("code",[a._v("ETag")]),a._v(" 的值，服务器经过对比决定返回200还是304。")]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/http_cache_etag.jpg",alt:"http_cache_etag"}})]),a._v(" "),t("p",[t("code",[a._v("If-None-Match")]),a._v(" 的值中有个W/前缀，这个是用来提示应该采用弱比较算法的。")]),a._v(" "),t("p",[t("code",[a._v("ETag")]),a._v(" 有两种类型：强ETag(strong ETag)与弱ETag(weak ETag)。")]),a._v(" "),t("p",[a._v("强、弱ETag类型的出现与Apache服务器计算ETag的方式有关。Apache默认通过 FileEtag 中 FileEtag INode Mtime Size的配置自动生成ETag(当然也可以通过用户自定义的方式)。")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("INode:  文件的索引节点(inode)数")])]),a._v(" "),t("li",[t("p",[a._v("MTime:  文件的最后修改日期及时间")])]),a._v(" "),t("li",[t("p",[a._v("Size:   文件的字节数")])])]),a._v(" "),t("p",[a._v("在大型多WEB集群时,使用ETag时有问题,所以有人建议使用WEB集群时不要使用ETag,其实很好解决,因为多服务器时,INode不一样,所以不 同的服务器生成的ETag不一样,所以用户有可能重复下载(这时ETag就会不准),明白了上面的原理和设置后,解决方法也很容易,让ETag后面二个参 数,MTime和Size就好了.只要ETag的计算没有INode参于计算,就会很准了。")]),a._v(" "),t("h3",{attrs:{id:"两者的优先级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#两者的优先级"}},[a._v("#")]),a._v(" 两者的优先级")]),a._v(" "),t("p",[t("code",[a._v("ETag")]),a._v(" 可以解决 "),t("code",[a._v("Last-Modified")]),a._v(" 不好处理的问题，更准确的控制缓存，因此 "),t("code",[a._v("ETag")]),a._v(" 的优先级高于 "),t("code",[a._v("Last-Modified")]),a._v("。")]),a._v(" "),t("h3",{attrs:{id:"last-modified-的弊端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-的弊端"}},[a._v("#")]),a._v(" "),t("code",[a._v("Last-Modified")]),a._v(" 的弊端")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("一些文件会周期性的修改，但是内容并未改变只改了时间，这个时候不希望重新请求。")])]),a._v(" "),t("li",[t("p",[a._v("某些文件修改非常频繁，"),t("code",[a._v("Last-Modified/If-Modified-Since")]),a._v(" 只能检查到秒级的粒度，无法检查秒级以下的（或者说Unix记录MTIME只能到秒级）。")])]),a._v(" "),t("li",[t("p",[a._v("某些服务器可能无法精确获取文件的最后修改时间。")])])]),a._v(" "),t("h2",{attrs:{id:"vary"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vary"}},[a._v("#")]),a._v(" Vary")]),a._v(" "),t("p",[t("code",[a._v("Vary")]),a._v(" 响应头决定对于后续的请求头，如何判断是一个新的资源还是缓存。")]),a._v(" "),t("p",[t("code",[a._v("Vary")]),a._v(" 属于强缓存标识头。")]),a._v(" "),t("p",[a._v("当缓存服务器收到一个请求，只有当前的请求和原始（缓存）的请求头和缓存响应头里的 "),t("code",[a._v("Vary")]),a._v(" 都匹配，才能使用缓存的响应。")]),a._v(" "),t("p",[a._v("使用 "),t("code",[a._v("Vary")]),a._v("头有利于内容服务的动态多样性。例如使用：")]),a._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[a._v("Vary:")]),a._v(" User-Agent\n")])])]),t("p",[a._v("缓存服务器需要通过UA判断是否使用缓存的页面。如果需要区分移动端和桌面端的展示内容，利用这种方式就能避免在不同的终端展示错误的布局。另外，它可以帮助搜索引擎更好地发现页面的移动版本，并且告诉搜索引擎没有引入Cloaking。")]),a._v(" "),t("p",[a._v("因为移动版和桌面的客户端的请求头中的User-Agent不同， 缓存服务器不会错误地把移动端的内容输出到桌面端到用户。")]),a._v(" "),t("h2",{attrs:{id:"同时设置强缓存和协商缓存（cache-control-和-etag）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#同时设置强缓存和协商缓存（cache-control-和-etag）"}},[a._v("#")]),a._v(" 同时设置强缓存和协商缓存（"),t("code",[a._v("Cache-Control")]),a._v(" 和 "),t("code",[a._v("ETag")]),a._v("）")]),a._v(" "),t("p",[a._v("服务器同时设置了"),t("code",[a._v("Cache-Control/max-age")]),a._v(" 和 "),t("code",[a._v("Expires")]),a._v("时,会同时使用,也就是说在完全匹配 "),t("code",[a._v("If-Modified-Since")]),a._v(" 和 "),t("code",[a._v("If-None-Match")]),a._v(" 即检查完修改时间和 Etag 之后,服务器才能返回304。")])])}),[],!1,null,null,null);e.default=_.exports}}]);